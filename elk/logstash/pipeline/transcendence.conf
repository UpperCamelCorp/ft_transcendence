input {
  beats {
    port => 5044
  }

  tcp {
    port => 5000
    codec => json_lines
  }
}

filter {
  # Parse container logs
  if [container] {
    if [container][name] == "ft_transcendence" {
      # Parse application JSON logs
      if [message] =~ /^\{.*\}$/ {
        json {
          source => "message"
          target => "app_log"
        }

        # Extract log level
        if [app_log][level] {
          mutate {
            add_field => { "log_level" => "%{[app_log][level]}" }
          }
        }

        # Extract user information
        if [app_log][userId] {
          mutate {
            add_field => { "user_id" => "%{[app_log][userId]}" }
          }
        }

        # Categorize by event type
        if [app_log][type] {
          mutate {
            add_field => { "event_category" => "%{[app_log][type]}" }
          }
        }

        # Extract HTTP request info
        if [app_log][method] and [app_log][url] {
          mutate {
            add_field => { "http_method" => "%{[app_log][method]}" }
            add_field => { "http_url" => "%{[app_log][url]}" }
          }
        }

        # Extract response info
        if [app_log][statusCode] {
          mutate {
            add_field => { "http_status" => "%{[app_log][statusCode]}" }
          }
        }

        if [app_log][responseTime] {
          mutate {
            add_field => { "response_time_ms" => "%{[app_log][responseTime]}" }
          }

          # Convert to number for aggregations
          mutate {
            convert => { "response_time_ms" => "float" }
          }
        }

        # Game-specific processing
        if [app_log][type] == "game_event" {
          if [app_log][gameId] {
            mutate {
              add_field => { "game_id" => "%{[app_log][gameId]}" }
            }
          }

          if [app_log][duration] {
            mutate {
              add_field => { "game_duration_ms" => "%{[app_log][duration]}" }
            }
            mutate {
              convert => { "game_duration_ms" => "integer" }
            }
          }
        }

        # Authentication processing
        if [app_log][type] == "auth_event" {
          if [app_log][ip] {
            mutate {
              add_field => { "client_ip" => "%{[app_log][ip]}" }
            }
          }

          if [app_log][userAgent] {
            mutate {
              add_field => { "user_agent" => "%{[app_log][userAgent]}" }
            }
          }
        }
      }

      # Add service metadata
      mutate {
        add_field => {
          "service" => "transcendence"
          "environment" => "development"
        }
      }
    }
  }

  # Parse timestamp
  if [@timestamp] {
    date {
      match => [ "@timestamp", "ISO8601" ]
    }
  }

  # GeoIP enrichment for client IPs
  if [client_ip] {
    geoip {
      source => "client_ip"
      target => "geoip"
    }
  }
}

output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    user => "${ELASTICSEARCH_USERNAME}"
    password => "${ELASTICSEARCH_PASSWORD}"
    index => "transcendence-logs-%{+YYYY.MM.dd}"
  }

  stdout {
    codec => rubydebug {
      metadata => false
    }
  }
}